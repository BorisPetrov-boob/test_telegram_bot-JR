import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from config import TOKEN
from keyboards.reply import main_menu
from keyboards.inline import save_cancel_kb

import logging

bot = Bot(TOKEN)  # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
dp = Dispatcher()  # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä


@dp.message(Command('start'))  # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç (5)
async def start_handler(message: Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n" \
                   "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "/help - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n" \
                   "/add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n" \
                   "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n" \

    await message.answer(welcome_text, reply_markup=main_menu())


@dp.message(Command('help'))  # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–Ω—Ñ–æ (6) inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
async def help_handler(message: Message):
    help_text = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. /add - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "2. /list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
    )
    await message.answer(help_text)


ADS_FILE = "ads.json"


def load_ads():
    try:
        with open(ADS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_ads(ads):
    try:
        with open(ADS_FILE, "w", encoding="utf-8") as f:
            json.dump(ads, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


@dp.message(Command("list"))
async def show_list(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    ads = load_ads()
    await message.answer(f"üìã –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}")


@dp.message()
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    ads = load_ads()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    await message.answer("–ú–µ–Ω—é", reply_markup=save_cancel_kb())
    await asyncio.sleep(2)
    if message.text and not message.text.startswith('/'):
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        new_ad = {
            "id": len(ads) + 1,
            "type": "text",
            "content": message.text,
            "user_id": user_id,
            "user": username
        }

        ads.append(new_ad)
        save_ads(ads)
        await message.answer("‚úÖ –í–∞—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    elif message.photo:
        # –§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        photo = message.photo[-1]
        new_ad = {
            "id": len(ads) + 1,
            "type": "photo",
            "file_id": photo.file_id,
            "user_id": user_id,
            "user": username
        }
        ads.append(new_ad)
        save_ads(ads)
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    elif message.audio:
        # –ê—É–¥–∏–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        audio = message.audio
        new_ad = {
            "id": len(ads) + 1,
            "type": "audio",
            "file_id": audio.file_id,
            "user_id": user_id,
            "user": username
        }
        ads.append(new_ad)
        save_ads(ads)
        await message.answer("‚úÖ –ê—É–¥–∏–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –∞—É–¥–∏–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())