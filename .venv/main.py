import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from config import TOKEN
from keyboards.reply import main_menu
from keyboards.inline import save_cancel_kb

import logging



bot = Bot(TOKEN) #–°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
dp = Dispatcher() #–°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä

AUDIO_JSON_FILE="audio.json"
PHOTOS_JSON_FILE = "photos.json"
TEXT_JSON_FILE = "texts.json"


class PhotoState(StatesGroup):
    waiting_for_description = State()

class TextState(StatesGroup):
    waiting_for_confirmatio = State()




@dp.message(Command('start')) #–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç (5)
async def start_handler(message: Message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n" \
                   "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                   "/help - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n" \
                   "/add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n" \
                   "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n" \

    await message.answer(welcome_text, reply_markup=main_menu())



@dp.message(Command('help'))#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–Ω—Ñ–æ (6) inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
async def help_handler(message: Message):
    help_text = (
            "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1. /add - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "2. /list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
    )
    await message.answer(help_text)



@dp.message(F.text & ~F.command)
async def text_handler(message: Message):
    text = message.text

    await message.answer("–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=save_cancel_kb())

    data = await state.get_data()
    file_id = data.get('file_id')
    await state.update_data(file_id=file_id)

@dp.callback_query(F.data == "save_text")
async def save_text_callback(callback: CallbackQuery, state: FSMContext):
    text_data = {
        "text": text_to_save,
        "user_id": callback.from_user.id,
        "username": callback.from_user.username,
        "first_name": callback.from_user.first_name,
        "message_id": callback.message.message_id,
        "date": callback.message.date.isoformat()
    }


    all_texts = load_texts()
    all_texts.append(text_data)
    save_texts(all_texts)



@dp.message(F.photo)
async def photo_handler(message: Message, state: FSMContext):
    photo = message.photo
    file_id = photo.file_id

    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?")


    data = await state.get_data()
    file_id = data.get('file_id')

    photo_data = {
        "file_id": file_id,
        "description": None,
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "timestamp": message.date.isoformat(),
        "type": "photo"
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    all_data = load_data(PHOTOS_JSON_FILE)
    all_data.append(photo_data)
    save_data(all_data, PHOTOS_JSON_FILE)

    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è!")



@dp.message(F.audio)#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∞—É–¥–∏–æ (9)
async def audio_handler(message: Message):
    audio = message.audio
    file_id = audio.file_id
    await message.answer('–ê—É–¥–∏–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

    audio_data = {
        "file_id": file_id,
        "file_name": audio.file_name,
        "duration": audio.duration,
        "mime_type": audio.mime_type,
        "file_size": audio.file_size,
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "timestamp": message.date.isoformat(),
        "type": "audio"
    }

    all_data = load_data(AUDIO_JSON_FILE)
    all_data.append(audio_data)
    save_data(all_data, AUDIO_JSON_FILE)

    await message.answer("–ê—É–¥–∏–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")







async def main(): #—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (1)
    logging.basicConfig(level=logging.INFO) #–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (2)
    await dp.start_polling(bot) #–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (4)

asyncio.run(main())

